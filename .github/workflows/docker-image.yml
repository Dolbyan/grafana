name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js 20
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Pylint
      run: |
        pylint **/*.py

    - name: Run unit tests
      run: |
        python -m unittest test.py

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v0
      with:
        version: 'latest'
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_CREDENTIALS }}

    - name: Log in to Google Container Registry
      run: |
        gcloud auth configure-docker

    - name: Build and push Docker image
      run: |
        docker build . --file Dockerfile --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-image-name:latest
        docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/my-image-name:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v0
      with:
        version: 'latest'
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up kubectl
      run: |
        gcloud container clusters get-credentials app-cluster --zone ${GKE_ZONE} --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f flask-app-deployment.yaml
        kubectl apply -f flask-app-service.yaml
        kubectl apply -f postgres-deployment.yaml
        kubectl apply -f postgres-service.yaml
        kubectl apply -f prometheus-deployment.yaml
        kubectl apply -f prometheus-service.yaml
        kubectl apply -f prometheus-config.yaml
