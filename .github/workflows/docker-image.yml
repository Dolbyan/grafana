name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Node.js 20
      uses: actions/setup-node@v3
      with:
        node-version: '20'
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Pylint
      run: |
        pylint **/*.py
    - name: Run unit tests
      run: |
        python -m unittest test.py


  
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checout code
      uses: actions/checkout@v4

    - name: Set up Node.js 20
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/grafana:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Set up SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Deploy Docker image to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.AWS_EC2_PUBLIC_IP }} << 'EOF'
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/grafana:latest
          sudo docker stop my-app || true 
          sudo docker rm my-app || true 
          sudo docker run -d -p 80:80 -p 3000:3000 -p 9090:9090 --name my-app ${{ secrets.DOCKER_USERNAME }}/grafana:latest
        EOF

    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        kubectl-version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config

    - name: Apply Kubernetes manifests
      run: |
        kubectl apply -f flask-app-deployment.yaml
        kubectl apply -f flask-app-service.yaml
        kubectl apply -f postgres-deployment.yaml
        kubectl apply -f postgres-service.yaml
        kubectl apply -f prometheus-deployment.yaml
        kubectl apply -f prometheus-service.yaml